import planner.
import ordset.
import util.
import sat.

main =>
  Grid = read_file_lines(),
  {W,H} = {Grid[1].len, Grid.len},
  get_global_map(g1).put(dims,{W,H}),
  get_global_map(g1).put(grid,Grid),

  S0 = {2,1,[{2,1}]},
  {Vs,Es} = to_graph(Grid),
  Cost = search(Vs.keys,Es.keys,{2,1},{W-1,H}),
  writeln(Cost).

search(Vs,Es,Src,Dest) = Cost =>
  path_d(Vs,Es,Src,Dest),
  Counts = new_array(Es.len),
  Counts :: 0..1,
  foreach (I in 1..Es.len)
    {_,_,B} = Es[I],
    Counts[I] #= B
  end,
  S #= sum(Counts),
  S :: 0..2**20,
  solve([seq,$max(S),$report(printf("Best so far: %d\n",S))],[S,Vs,Es]),
  Cost = S.

to_graph(Grid) = Graph =>
  {W,H} = get_global_map(g1).get(dims),
  Grid = get_global_map(g1).get(grid),
  Actions = [north,east,south,west],

  Vs = new_set(),
  Es = new_set(),

  foreach (J in 1..H)
    foreach (I in 1..W)
      Cell = Grid[J,I],
      if Cell != '#' then
        %B :: 0..1,
        Vs.put({{I,J}, _}),

        foreach (Action in Actions)
          {I2, J2} = inc(I,J,Action),
          if (I2 >= 1, I2 <= W, J2 >= 1, J2 <= H) then
            Target = Grid[J2,I2],
            if (Target != '#') then
              %B :: 0..1,
              Es.put({{I,J},{I2,J2},_}),
            end
          end
        end
      end
    end
  end,
  println(vs=Vs),
  Graph = {Vs,Es}.

inc(X,Y,north) = {X,Y-1}.
inc(X,Y,east)  = {X+1,Y}.
inc(X,Y,south) = {X,Y+1}.
inc(X,Y,west)  = {X-1,Y}.
