import planner.
import ordset.
import util.

main =>
  Grid = read_file_lines(),
  W = Grid[1].len, H = Grid.len,
  get_global_map(g1).put(dims,{W,H}),
  get_global_map(g1).put(grid,Grid),
  get_global_map(g1).put(gc,1),

  garbage_collect(4000000000),
  S0 = {2,1,[{2,1}]},
  %best_plan_unbounded(S0,Plan,Cost),
  Seen = new_array(W*H),
  foreach (I in 1..Seen.len)
    Seen[I] = 0
  end,
  Seen[2+0*W] := 1,
  Cost = dfs(2,1,Seen,1),
  writeln(Plan),
  writeln(Cost).

dfs(I,J,Seen,Max) = R =>
  if Max mod 400 == 0 then
    println(Max),
    Gc = get_global_map(g1).get(gc),
    if Gc mod 200 == 0 then
      println(gc),
      garbage_collect()
    end,
    get_global_map(g1).put(gc, Gc+1),
  end,
  {W,H} = get_global_map(g1).get(dims),
  Grid = get_global_map(g1).get(grid),
  Actions = [north,east,south,west],
  R = 0,
  foreach (Action in Actions)
    {I2, J2} = inc(I,J,Action),
    if (I2 >= 1, I2 <= W, J2 >= 1, J2 <= H) then
      Target = Grid[J2,I2],
      Explored = Seen[I2+(J2-1)*W],
      %println(explored=Explored),
      if final({I2,J2,tmp}) then
        R := Max
      elseif (Target != '#', Explored == 0) then
        Seen[I2+(J2-1)*W] := 1,
        R2 = dfs(I2,J2,Seen,Max+1),
        if R2 > R then
          printf("new possible max: %d\n", R2),
          R := R2
        end,
        Seen[I2+(J2-1)*W] := 0,
      end
    end
  end.
    
table % needed to avoid rapidly filling all available RAM and taking ages, ironically (use memory to save memory)
action(S, S1, Action, Cost) ?=>
  {W,H} = get_global_map(g1).get(dims),
  Grid = get_global_map(g1).get(grid),
  {I,J,Seen} = S,

  member(Action, [north,east,south,west]),
  {I2, J2} = inc(I,J,Action),
  I2 >= 1, I2 <= W,
  J2 >= 1, J2 <= H,
  Target = Grid[J2,I2],
  Target != '#',
  not(membchk({I2,J2},Seen)),
  S1 = {I2, J2, Seen.insert({I2,J2})},
  Cost = -1.

% heuristic({I,J,_,_}) = R =>
%   {W,H} = get_global_map(g1).get(dims),
%   R = (H - J) + (W - I).

final({I,J,_}) => {I+1,J} = get_global_map(g1).get(dims).

inc(X,Y,north) = {X,Y-1}.
inc(X,Y,east)  = {X+1,Y}.
inc(X,Y,south) = {X,Y+1}.
inc(X,Y,west)  = {X-1,Y}.
