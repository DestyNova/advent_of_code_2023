import util.

main =>
  M = new_map(),
  extract(read_file_lines(), M, false),
  println(min([lookup(Seed,"seed",M) : Seed in M.get("seeds")])).

lookup(N,"location",M) = N.

lookup(N,Src,M) = R =>
  Found = false,
  {Dest,Mappings} = M.get(Src),
  foreach ([Dstart,Sstart,L] in Mappings)
    if Sstart <= N && Sstart+L > N then
      D = N + Dstart - Sstart,
      Found := lookup(D,Dest,M),
    end,
  end,
  R = cond(Found == false, lookup(N,Dest,M),Found).

extract([],M,_).
extract([""|Rest],M,CurrentMap) :- extract(Rest,M,CurrentMap).
extract([[s,e,e,d,s,':',' '|Xs]|Rest],M,_) :-
  M.put("seeds", Xs.split.map(parse_term)),
  extract(Rest,M,false).

extract([S|Rest],M,_) :-
  membchk(':',S),
  [X|_] = S.split,
  [Src,_,Dest] = X.split("-"),
  extract(Rest,M,{Src,Dest}).

extract([S|Rest],M,{Src,Dest}) :-
  {_,Ranges} = M.get(Src,{Dest,[]}),
  M.put(Src, {Dest,[S.split.map(parse_term)|Ranges]}),
  extract(Rest,M,{Src,Dest}).
