import util.

main =>
  Blocks = new_map(),
  Coords = new_map(),
  parse_all(Blocks, Coords, read_file_lines()),
  println([Blocks, Coords]),

  I = 1,
  Falling = true,
  while (Falling)
    Moved = step(Blocks, Coords),
    printf("%3d: %d blocks moved.\n", I, Moved),
    if Moved == 0 then
      Falling := false
    end,
    I := I + 1,
  end,

  println(blocks=Blocks.size),
  println(Blocks),

  Deletable = find_deletable(Blocks, Coords),
  println(Deletable.len).

find_deletable(Blocks, Coords) = R =>
  Supporting = new_map(),
  foreach(Id in Blocks.keys)
    Supporting.put(Id, 0)
  end,

  foreach (Id=Block in Blocks)
    Pieces = get_pieces(Block),
    Below = get_supported(Id, Pieces, Coords),
    if Below.size == 1 then
      Supporting.put(Below.keys.head, 1)
    else
      printf("block %w with pieces %w on ground or supported by multiple: %w\n", Id, Pieces, Below),
    end
  end,
  % println(supporting=Supporting),
  R = [K : K=0 in Supporting].
  
get_pieces({C1,C2}) = [{X,Y,Z} : X in C1[1]..C2[1], Y in C1[2]..C2[2], Z in C1[3]..C2[3]].

step(Blocks, Coords) = Moved =>
  Moved = 0,
  foreach (Id=Block in Blocks)
    Pieces = get_pieces(Block),

    [] = [Piece : Piece in Pieces, Piece[3] < 1], % no piece should be below the ground
    Touching_ground = [Piece : Piece in Pieces, Piece[3] == 1],
    Below = get_supported(Id, Pieces, Coords),

    % printf("blocks touching ground: %w, blocks below: %w\n", Touching_ground, Below),

    if Touching_ground.len == 0 && Below.size == 0 then
      % println(can_fall),
      % "delete" old block coords
      foreach ({X,Y,Z} in Pieces)
        Coords.put({X,Y,Z}, 0),
      end,
      foreach ({X,Y,Z} in Pieces)
        Coords.put({X,Y,Z-1}, Id),
      end,

      % update block info
      [New_c1,New_c2] = [{X,Y,Z-1} : {X,Y,Z} in Block],
      Blocks.put(Id, {New_c1, New_c2}),
      Moved := Moved + 1
    end,
  end.

get_supported(Id, Pieces, Coords) = R =>
  R = new_set(),
  foreach ({X,Y,Z} in Pieces)
    Below = Coords.get({X,Y,Z-1}, 0),
    if Below > 0 && Below != Id then
      R.put(Below)
    end
  end.

parse_all(Blocks,Coords,Ls) => parse_all(Blocks, Coords, Ls, 1).
parse_all(Blocks,Coords,[],_) => true.
parse_all(Blocks,Coords,[L|Lines],I) =>
  [A,B] = [N.map(parse_term) : N in [Ns.split(",") : Ns in L.split("~")]],
  C1 = A.to_array,
  C2 = B.to_array,
  Blocks.put(I,{C1,C2}),
  foreach (X in C1[1]..C2[1], Y in C1[2]..C2[2], Z in C1[3]..C2[3])
    Coords.put({X,Y,Z}, I),
  end,
  parse_all(Blocks,Coords,Lines,I+1).

get_offset("U") = {0,-1}.
get_offset("R") = {1,0}.
get_offset("D") = {0,1}.
get_offset("L") = {-1,0}.
