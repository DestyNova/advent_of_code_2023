import ordset.
import util.

main =>
  Blocks = new_map(),
  Coords = new_map(),
  parse_all(Blocks, Coords, read_file_lines()),
  %println([Blocks, Coords]),

  I = 1,
  Falling = true,
  while (Falling)
    Moved = step(Blocks, Coords),
    if Moved == 0 then
      Falling := false
    end,
    I := I + 1,
  end,

  println(blocks=Blocks.size),

  {Critical,Supported_by} = get_delete_tree(Blocks, Coords),
  % println(crit=Critical),
  % println(Supported_by=Supported_by),

  Supporters = invert(Supported_by),
  % println(supporters=Supporters),
  Roots = find_roots(Supported_by,Blocks),
  println(roots=Roots.len),
  % 19 supports 1195
  %println(supporters_of=Supporters.get(1195)),
  Pieces = get_pieces(Blocks.get(Roots[1])),
  println(pieces=Pieces),
  Responsible_for = [dfs(Node,Supported_by,Supporters) : Node in Supporters.keys],
  % println(resp=[{Id,Resp.len} : {Resp,Id} in zip(Responsible_for, 1..len(Responsible_for))]),
  %Interesting = 728,
  Interesting = 1,
  % 706 -> 1133 ... 585 -> 1019, 462 -> 1150, 356 -> 1151
  println(resp2=Responsible_for[Interesting]),
  %println([Responsible_for[R3] : R2 in Responsible_for[Interesting], R3 in Responsible_for[R2]].flatten.remove_dups.len),
  println(resp3=Supported_by.get(Interesting)),
  %println(missing=Supporters.get(326)),
  % println(resp4=[Supporters.get(B) : B in Supported_by.get(Interesting), println(wtf=B)]),
  Responsible = [get_all_drops(Node, Supported_by, Supporting) : Node in Supporters.keys],
  println(Responsible_for.map(len).sum).

  % recursively, starting at highest node... (optional?)
  % foreach ancestor who is the only one on that level, increment that ancestor's count?
  % Boom = get_ancestor_counts(Supported_by),
  % println(Boom.values.sum).

get_all_drops(Node, Supported_by, Supporting) = find_all(Descendant,

get_all_drops(Node, Supported_by, Supporting, Drops) :-
invert(Tree) = R =>
  R = new_map(),
  foreach (Node=Children in Tree)
    R.put(Node, R.get(Node, [])), % make sure every node has an entry
    foreach (Child in Children)
      if Node == 1 then
        printf("Node %d is responsible for %d\n", Node, Child),
      end,
      Parents = R.get(Child, []),
      R.put(Child, Parents.insert(Node)),
    end
  end.

dfs(Root,Tree,Inverted) = dfs(Root,Tree,Inverted,[]).
dfs(Root,Tree,Inverted,Supports) = All_descendants =>
  %printf("dfs, root: %w, tree: %w, inverted: %w, supports: %w\n", Root, Tree, Inverted, Supports),
  All_descendants = new_ordset([]),
  Supports2 = Supports.insert(Root),
  foreach (Node in Tree.get(Root))
    Supports2 := Supports2.insert(Node),
  end,
  %printf("supports2: %w, children: %w\n", Supports2, Tree.get(Root)),
  foreach (Node in Tree.get(Root))
    %printf("checking parents of %w for subsets of the existing parent set.\n", Node),
    if(Inverted.get(Node).subset(Supports2)) then
      %printf("subset supported by %w found: %w\n", Node, Inverted.get(Node)),
      All_descendants := All_descendants.insert(Node).union(dfs(Node,Tree,Inverted,Supports2)),
    end
  end.

find_roots(Supported_by,Blocks) = [Node : Node in Roots] =>
  Roots = Supported_by.keys.new_ordset(),
  println(Supported_by_len=Roots.len),
  %println(Supported_by_19=Supported_by.get(1195)),
  foreach (Node in Supported_by.keys)
    %printf("%4d: %d %w Supported_by %w\n", I, Node, Blocks.get(Node), Supported_by.get(Node)),
    foreach (Supported in Supported_by.get(Node))
      Roots := Roots.delete(Supported)
    end
  end.

get_ancestor_counts(G) = Boom =>
  Ancestors = new_map(),
  foreach (K=V in G)
    foreach (Child in V.keys)
      Parents = Ancestors.get(Child, new_set()),
      Parents.put(K),
      Ancestors.put(Child, Parents)
    end,
  end,

  Boom = new_map(),
  foreach (K=V in G)
    % for each K, number of children whose only other supports are in my ancestors and children?
    garbage_collect(500000000),
    My_ancestors = get_descendants(K, Ancestors),
    Descendants = get_descendants(K,G),
    Count = 0,
    foreach (Child in Descendants.keys)
      Supports = get_descendants(Child, Ancestors),
      Parallel_supports = [S : S in Supports.keys, K != S, not(has_key(My_ancestors, S)), not(has_key(Descendants, S))],
      if len(Parallel_supports) == 0 then
        Count := Count + 1
      end
    end,
    Boom.put(K, Count)
  end.

table
get_descendants(Node,G) = get_descendants_slow(Node,G).new_set().
get_descendants_slow(Node,G) = R =>
  Children = G.get(Node, new_set()).keys,
  Descendants = flatten([get_descendants_slow(Child, G) : Child in Children]),
  R = Children ++ Descendants.

% for each block
% get its pieces
% find who is supported by it
% count the nodes in the tree
get_delete_tree(Blocks, Coords) = R =>
  println(get_delete_tree={Blocks.size, Coords.size}),
  Supported_by = new_map(),
  Critical = new_map(),
  foreach(Id in Blocks.keys)
    Supported_by.put(Id, []),
    Critical.put(Id, [])
  end,

  foreach (Id=Block in Blocks)
    Pieces = get_pieces(Block),
    Below = get_supported(Id, Pieces, Coords),
    Interesting = [1195,19],
    if membchk(Id, Interesting) then
      printf("node: %d, pieces: %w, below: %w\n", Id, Pieces, Below),
      foreach (Key_block=_ in Below)
        println(key=Key_block)
      end,
    end,
    foreach (Key_block=_ in Below)
      Supported_by.put(Key_block, Supported_by.get(Key_block).insert(Id)),
      if membchk(Key_block, Interesting) then
        printf("node: %d, key block: %d\n", Id, Key_block),
        println(Supported_by=Supported_by.get(Key_block))
      end,
      %Supported_by.put(Key_block, [Id|Supported_by.get(Key_block)]),
      if Below.size == 1 then
        Critical.put(Key_block, Critical.get(Key_block).insert(Id)),
      end
    end
  end,
  R = {Critical,Supported_by}.
  
get_pieces({C1,C2}) = [{X,Y,Z} : X in C1[1]..C2[1], Y in C1[2]..C2[2], Z in C1[3]..C2[3]].

step(Blocks, Coords) = Moved =>
  Moved = 0,
  foreach (Id=Block in Blocks)
    % printf("id: %d pos: %w\n", Id, Block),
    Pieces = get_pieces(Block),

    [] = [Piece : Piece in Pieces, Piece[3] < 1], % no piece should be below the ground
    Touching_ground = [Piece : Piece in Pieces, Piece[3] == 1],
    Below = get_supported(Id, Pieces, Coords),

    % printf("blocks touching ground: %w, blocks below: %w\n", Touching_ground, Below),

    if Touching_ground.len == 0 && Below.size == 0 then
      % println(can_fall),
      % "delete" old block coords
      foreach ({X,Y,Z} in Pieces)
        Coords.put({X,Y,Z}, 0),
      end,
      foreach ({X,Y,Z} in Pieces)
        Coords.put({X,Y,Z-1}, Id),
      end,

      % update block info
      [New_c1,New_c2] = [{X,Y,Z-1} : {X,Y,Z} in Block],
      Blocks.put(Id, {New_c1, New_c2}),
      Moved := Moved + 1
    end,
  end.

get_supported(Id, Pieces, Coords) = R =>
  R = new_set(),
  foreach ({X,Y,Z} in Pieces)
    Below = Coords.get({X,Y,Z-1}, 0),
    if Below > 0 && Below != Id then
      R.put(Below)
    end
  end.

parse_all(Blocks,Coords,Ls) => parse_all(Blocks, Coords, Ls, 1).
parse_all(Blocks,Coords,[],_) => true.
parse_all(Blocks,Coords,[L|Lines],I) =>
  [A,B] = [N.map(parse_term) : N in [Ns.split(",") : Ns in L.split("~")]],
  C1 = A.to_array,
  C2 = B.to_array,
  Blocks.put(I,{C1,C2}),
  foreach (X in C1[1]..C2[1], Y in C1[2]..C2[2], Z in C1[3]..C2[3])
    Coords.put({X,Y,Z}, I),
  end,
  parse_all(Blocks,Coords,Lines,I+1).

get_offset("U") = {0,-1}.
get_offset("R") = {1,0}.
get_offset("D") = {0,1}.
get_offset("L") = {-1,0}.
