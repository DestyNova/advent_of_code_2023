import util.

main =>
  Data = parse_all(read_file_lines()),
  println(sum(Data.map(calc))).

table
calc({[],Lengths}) = cond(Lengths.len > 0, 0, 1).  % should have no remaining sequences
calc({['.'|Xs],Lengths}) = calc({Xs,Lengths}).     % safe to consume a .
calc({Xs@['#'|_],[]}) = 0.                         % already consumed all sequences, shouldn't find another #
calc({Xs@['#'|_],Lengths}) = R =>
  L = Lengths[1],
  Block = Xs.take(L).remove_dups(),
  if Xs.len >= L && membchk(Block, [[],"#","#?"]) && (Xs.len == L || membchk(Xs[L+1], ".?")) then
    R = calc({Xs.drop(L+1),Lengths.tail}),    % drop the following character which must be a blank or ?
  else
    R = 0,
  end.

calc({Xs@['?'|_],[]}) = calc({Xs.tail,[]}).        % no remaining sequences, this must be a .
calc({Xs@['?'|_],Lengths}) = R =>
  L = Lengths[1],
  Block = Xs.take(L).remove_dups(),
  Count_broke = cond(
    (Xs.len < L || membchk('.', Block) || (Xs.len > L && Xs[L+1] == '#')),
    0,
    calc({Xs.drop(L+1),Lengths.tail})),
  Count_ok = calc({Xs.tail, Lengths}),
  R = Count_broke + Count_ok.

parse_all([]) = [].
parse_all([S|Xs]) = R =>
  [Springs,Ns] = S.split(),
  Lengths = Ns.split(",").map(parse_term),
  Megasprings = join([Springs : _ in 1..5], '?'),
  R = [{Megasprings, flatten([Lengths : _ in 1..5])}|parse_all(Xs)].
