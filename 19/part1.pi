import util.

main =>
  Data = read_file_lines().map(process),

  M = new_map(),
  Ratings = [],

  foreach (D in Data, D != [])
    if is_list(D) then
      R_map = new_map(),
      foreach ({K,V} in D)
        R_map.put(K,V)
      end,

      Ratings := [R_map|Ratings]
    else
      {Workflow,Rules} = D,
      M.put(Workflow, Rules)
    end
  end,

  N = sum([get_score(R) : R in Ratings, should_accept(M,R)]),
  println(N).

should_accept(M,Rating) =>
  Key = "in",
  while (Key != "R" && Key != "A")
    Rules = M.get(Key),
    Applied = false,
    foreach (Rule in Rules, break(Applied))
      Result = handle_rule(Rating, Rule),
      if Result != nop then
        Key := Result,
        Applied := true
      end,
    end,

    if not(Applied) then
      Key := Rules[Rules.len],
    end,
  end,
  Key == "A".

handle_rule(Rating,Rule) = R =>
  Ts = Rule.split("<>:"),

  R = nop,

  if Ts.len > 1 then
    Key = Ts[1],
    Op = [C : C in Rule, membchk(C, "<>")],
    Target = parse_term(Ts[2]),
    Action = Ts[3],
    Val = Rating.get(Key),
    if (Op == ">" && Val > Target) || (Op == "<" && Val < Target) then
      R := Action
    end,
  end.

get_score(Rating) = sum(Rating.values).

is_list([_|_]).

process("") = [].
process(['{'|Rest]) = R =>
  S = Rest[1..Rest.len-1],
  R = [{C, parse_term(N)} : Ns in S.split(","), [C,N] = Ns.split("=")].

process(S) = R =>
  [Name|[Rest|_]] = S.split("{"),
  Inner = Rest[1..Rest.len-1].split(","),
  R = {Name, Inner}.
