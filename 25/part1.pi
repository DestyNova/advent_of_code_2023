import util.
import sat.
import ordset.

main =>
  G = new_map(),
  _ = [process(Line,G) : Line in read_file_lines()],
  %println(g=G.get("cmg")),
  Vs = [{V,_} : V in new_set(G.keys ++ fold(++,[],G.values)).keys],
  %Vs = [{V.hash_code(),B} : {V,B} in Vs_orig],
  println(vs_orig=Vs_orig),
  println(vs=Vs),
  println(vsl=Vs.len),
  %Es_orig = get_edges(G).keys,
  Es = get_edges(G).keys,
  %Es = [{From.hash_code(),To.hash_code(),B} : {From,To,B} in Es_orig],

  % println(es=Es_orig),
  foreach ({From,To,_} in Es)
    if not(member({To,From,_}, Es)) then
      printf("one-sided membership: %w is missing\n", {To,From}),
      exit()
    end,
  end,
  % print_dot(Vs_orig,Es_orig)

  _ = random(random2()),
  % Vs := [{N,_} : N in 1..5],
  % Es := [{A,B,_} : {A,B} in [{1,2},{2,5},{2,3},{5,3},{3,4},{4,1}]],
  % max-flow min-cut
  Cut_size = Es.len,
  Step = 1,
  while (Cut_size > 6)
    G2 = new_ordset([[V] : {V,_} in Vs]),
    E2 = [{U,V,I} : {{U,V},I} in zip(drop_reverse_paths(Es),1..len(Es))],
    %println(e2=E2),
    while (G2.len > 2)
      if Step mod 100 == 0 then
        garbage_collect(),
        printf("Step %d, best so far: %d\n", Step, Cut_size),
      end,
      Step := Step + 1,
      % pick edge at random
      %println(g2len=G2.len),
      I = random(1,E2.len),
      % contract edge (fuse vertices?)
      {U,V,Label} = E2[I],
      %println(deleting={U,V,Label}),
      New_key = union(U,V),
      %println(new_key=New_key),
      G2 := G2.delete(U).delete(V).insert(New_key),
      %println(g2=G2),
      % remove and replace edge? how to keep track of other edges?
      Update_to_U = findall({A,A_label}, (member({A,U,A_label},E2) || member({U,A,A_label},E2))),
      %println(update_to_u=Update_to_U),
      Update_to_V = findall({A,A_label}, (member({A,V,A_label},E2) || member({V,A,A_label},E2))),
      %println(update_to_v=Update_to_V),
      foreach ({A,_} in Update_to_U)
        E2 := E2.delete({A,U,_}).delete({U,A,_})
      end,
      foreach ({A,_} in Update_to_V)
        E2 := E2.delete({A,V,_}).delete({V,A,_})
      end,
      E2 := E2.delete({U,V,_}).delete({V,U,_}), % delete collapsed edge
      %if not(subset(A,New_key)) then
      E2 := E2.union(new_ordset([{A,New_key,A_label} : {A,A_label} in Update_to_U])),
      E2 := E2.union(new_ordset([{A,New_key,A_label} : {A,A_label} in Update_to_V])),
      %end,
      foreach ({A,B,_} in E2)
        if subset(A,B) then
          %println(self={A,B}),
          E2 := E2.delete({A,B,_})
        end
      end,
      % println(e2=E2),
      % println(e2l=E2.len),
      % delete self-loops
      %exit()
    end,
    if E2.len < Cut_size then
      Cut_size := E2.len,
      printf("New min cut: %d\n",Cut_size),
      println(G2[1].len * G2[2].len)
    end
  end.

drop_reverse_paths(Es) = R =>
  R = [],
  foreach ({U,V,_} in Es)
    if not(member({V,U},R)) then
      R := R.insert({new_ordset([U]),new_ordset([V])}),
    end,
  end.
 
  % delete remaining edges from original graph
  % DFS to count size of island
print_dot(Vs,Es) =>
  println(Es.len),
  nl,
  foreach ({V,_} in Vs)
    foreach ({V,To,1} in Es)
      printf("n_%w -- n_%w;\n", V, To),
    end,
  end,
  exit().

get_edges(G) = Edges =>
  Edges = new_set(),
  foreach (V=Conns in G)
    foreach (U in Conns)
      %print(edge={V,U}),
      Edges.put({V,U,_}),
      Edges.put({U,V,_})
    end
  end.

process(Line,G) = R =>
  [Name,Rest] = Line.split(":"),
  Others = Rest.tail.split(" "),
  printf("name: [%s], others: %w\n", Name, Others),
  %G.put(Name.hash_code(),Others.map(hash_code)),
  G.put(Name,Others),
  R = 0.
