import util.

main =>
  G = new_map(),
  [Moves,_|GraphS] = read_file_lines(),
  extract(GraphS,G),

  Starts = [Node : Node in G.keys, Node = [_,_,'A']],
  Counts = [proceed(Start, Moves, Moves, G, 0) : Start in Starts],
  println(lcm(Counts)).

lcm([A]) = A.
lcm([A,B|Xs]) = lcm([A*B // gcd(A,B) | Xs]).

proceed([_,_,'Z'], _, _, _, Count) = Count.
proceed(Here, [], Moves, G, Count) = proceed(Here, Moves, Moves, G, Count).
proceed(Here, ['L'|Steps], Moves, G, Count) = R, Options = G.get(Here) => R = proceed(Options[1], Steps, Moves, G, Count + 1).
proceed(Here, ['R'|Steps], Moves, G, Count) = R, Options = G.get(Here) => R = proceed(Options[2], Steps, Moves, G, Count + 1).

extract([],M).
extract([""|Xs],M) :- extract(Xs,M).
extract([S|Xs],M) :-
  [Here,L,R] = S.split(" =(,)"),
  M.put(Here, {L,R}),
  extract(Xs,M).
