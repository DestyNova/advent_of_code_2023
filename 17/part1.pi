import planner.
import util.

main =>
  Grid = [[parse_term([C]) : C in L] : L in read_file_lines()],
  get_global_map(g1).put(dims,{Grid[1].len, Grid.len}),
  get_global_map(g1).put(grid,Grid),

  garbage_collect(4000000000),
  S0 = {1,1,east,0},
  best_plan_unbounded(S0,Plan,Cost),
  writeln(Plan),
  writeln(Cost).

table % needed to avoid rapidly filling all available RAM and taking ages, ironically (use memory to save memory)
action(S, S1, Action, Cost) ?=>
  {W,H} = get_global_map(g1).get(dims),
  Grid = get_global_map(g1).get(grid),
  {I,J,Dir,Consecutive} = S,

  member(Action, [north,east,south,west]),
  not(backwards(Action, Dir)),
  Consecutive_moves = cond(Action == Dir, Consecutive + 1, 1),
  Consecutive_moves <= 3,
  {I2, J2} = inc(I,J,Action),
  I2 >= 1, I2 <= W,
  J2 >= 1, J2 <= H,
  S1 = {I2, J2, Action, Consecutive_moves},
  Cost = Grid[J2,I2].

heuristic({I,J,_,_}) = R =>
  {W,H} = get_global_map(g1).get(dims),
  R = (H - J) + (W - I).

final({I,J,_,_}) => {I,J} = get_global_map(g1).get(dims).

inc(X,Y,north) = {X,Y-1}.
inc(X,Y,east)  = {X+1,Y}.
inc(X,Y,south) = {X,Y+1}.
inc(X,Y,west)  = {X-1,Y}.

backwards(north,south).
backwards(east, west).
backwards(south,north).
backwards(west,east).
